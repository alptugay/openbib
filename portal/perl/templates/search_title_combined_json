[%#-
#######################################################################
#
# Templatename: virtualsearch_result_item
#
# Typ         : Mastertemplate (2/3)
#
# Aufgabe:
#
# Ausgabe der Suchergebnisse *eines* Katalogs
#
#######################################################################
-%]

[%

   querystring_without_page = cgiapp.to_cgi_querystring({ exclude = ['page'] });

   IF hits > 0 ;
      start_range     = nav.current_page*queryoptions.get_option('num')-queryoptions.get_option('num') + 1;
      end_range       = nav.current_page*queryoptions.get_option('num');
   ELSE ;
      nav.total_entries = 0
      nav.current_page = 1;
      nav.first_page = 1;
      hits = 0;
      start_range = 0;
      end_range = 0;
   END ;

   IF end_range >= hits ;
      end_range       = hits;
   END;

   records = [];

   FOREACH record IN recordlist.get_records ;
      thisrecord = {
                      link = {
                               rel = 'self'
                               href = "${scheme}://${servername}${path_prefix}/${config.get('databases_loc')}/id/${record.database}/${config.get('titles_loc')}/id/${record.id}.json"
                      }
                      id       = record.id
                      database = {
                           link = {
                                    rel = 'self'
                                    href = "${scheme}://${servername}${path_prefix}/${config.get('databases_loc')}/id/${record.database}.json"
                           }
                           id                = record.database
                           description       = dbinfo.get('dbnames').${record.database}.full
                           description_short = dbinfo.get('dbnames').${record.database}.short
                           url               = dbinfo.get('urls').${record.database}                          

                      }
                      fields   = record.get_fields
      };

      item_locations = record.get_locations;

      IF NOT item_locations;
         item_locations = [ dbinfo.get('locationid').${record.database} ];
      END;

      blacklisted_locations = { 'DE-38-USBFB' => 1 };

      item_locations_out = [];

      FOREACH item_location IN item_locations ;
         NEXT IF blacklisted_locations.${item_location}.defined ;

           this_item_location = {
             link = {
                 rel = 'self'
                 href = "${scheme}://${servername}${path_prefix}/${config.get('locations_loc')}/id/${item_location}.json"
            }
           id = item_location 
           description = locinfo.get('identifier').${item_location}.description  
        };

        item_locations_out.push(this_item_location); 
      END;

      thisrecord.locations = item_locations_out;

      records.push(thisrecord);
   END ;


   metainformation = {
      start_range = start_range
      end_range   = end_range
      hits        = nav.total_entries
      num         = qopts.get_option('num')
      page        = nav.current_page
      ips_user    = queryoptions.get_option('ips_user')
   };

 IF nav.current_page < nav.last_page ;
   next_page = nav.next_page;
   metainformation.next_page = {
       link = {
            rel = 'self'
            href = "${scheme}://${servername}${path_prefix}/${config.get('search_loc')}.json?page=${next_page};${querystring_without_page}"
       }
   };
 END;

 IF nav.current_page > nav.first_page ;
   previous_page = nav.previous_page;
   metainformation.previous_page = {
       link = {
            rel = 'self'
            href = "${scheme}://${servername}${path_prefix}/${config.get('search_loc')}.json?page=${previous_page};${querystring_without_page}"
       }
   };
 END;


   search_result = {
     link = {
          rel = 'self'
          href = "${scheme}://${servername}${path_prefix}/${config.get('search_loc')}.json?${cgiapp.to_cgi_querystring}"
     }

     meta = metainformation

     records = records

     facets = {
         availability   = facets.availability
         databases      = facets.database
         location       = facets.location
         persons        = facets.person
         corporatebody  = facets.corporatebody
         classification = facets.classification
         subject        = facets.subject
         year           = facets.year
         mediatype      = facets.mediatype
         language       = facets.language
         tag            = facets.tag
         litlist        = facets.litlist
     }

     filter = searchquery.get_filter

   };

   to_json(search_result);

%]
